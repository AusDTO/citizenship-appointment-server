buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE'
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.2.0'
        classpath "com.moowork.gradle:gradle-node-plugin:0.11"
    }
}

apply plugin: 'application'                  // https://docs.gradle.org/current/userguide/application_plugin.html
apply plugin: 'com.moowork.node'             // https://github.com/srs/gradle-node-plugin
apply plugin: 'findbugs'                     // https://docs.gradle.org/current/userguide/findbugs_plugin.html
apply plugin: 'java'                         // https://docs.gradle.org/current/userguide/java_plugin.html
apply plugin: 'org.unbroken-dome.test-sets'  // https://github.com/unbroken-dome/gradle-testsets-plugin
apply plugin: 'spring-boot'                  // http://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-gradle-plugin.html

node {
    version = '4.2.6'
    npmVersion = '2.14.12'
    // Base URL for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'https://nodejs.org/dist'
    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true
    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")
    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}")
}

findbugs {
    effort = "max"
    ignoreFailures = false
    reportLevel = "high"
}

def javaVersion = '1.8'
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

def springLoadedVersion = '1.2.5.RELEASE'
mainClassName = 'au.gov.dto.dibp.appointments.Application'
applicationDefaultJvmArgs = ["-javaagent:agents/springloaded-${springLoadedVersion}.jar", '-noverify']

group = 'au.gov.dto.dibp'
version = '0.0.1'

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

configurations {
    all*.exclude group: 'commons-logging'              // Never include commons-logging (use SLF4J instead)
    all*.exclude group: 'log4j'                        // Never include log4j (use SLF4J instead)
    all*.exclude group: 'org.apache.tomcat.embed'      // Never include Tomcat (use Jetty instead)
    all*.exclude group: 'org.eclipse.jetty.websocket'  // No need for websocket support
    all*.exclude module: 'jetty-jsp'                   // No need for JSP support
    all*.exclude module: 'slf4j-simple'                // Use logback
    all*.exclude module: 'spring-boot-starter-tomcat'  // Never include Tomcat (use Jetty instead)

    springloaded
}

testSets {
    integrationTest { dirName = 'integration-test' }
}

tasks.integrationTest.group = 'Verification'
tasks.integrationTest.description = 'Runs the integration tests.'
//tasks.integrationTest.outputs.upToDateWhen { false }  // Run all integration tests every time, even if no changes have been made

check.dependsOn integrationTest      // The check task fails the build if there are failing integration tests
integrationTest.shouldRunAfter test  // Run unit tests before integration tests

// Ensure that the HTML reports of unit and integration tests are written to different directories
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

repositories {
    mavenCentral()
}

def hamcrestVersion = '1.3'
def jmustacheVersion = '1.12'
def junitVersion = '4.12'
def springBootVersion = '1.3.2.RELEASE'
def okhttpVersion = '3.0.1'
def metricsVersion = '3.1.2'
def commonsIoVersion = '2.4'
def springCookieSessionVersion = '1.0'
def commonsCodecVersion = '1.10'
def commonsLang3Version = '3.4'
def zxingVersion = '3.2.1'
def prometheusVersion = '0.0.13'
def prometheusJmxVersion = '0.6'
def nimbusJoseJwtVersion = '4.12'

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}",
            "org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}",
            "org.springframework.boot:spring-boot-starter-security:${springBootVersion}",
            "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}",
            "io.dropwizard.metrics:metrics-jetty9:${metricsVersion}",
            "io.dropwizard.metrics:metrics-logback:${metricsVersion}",
            "io.dropwizard.metrics:metrics-servlet:${metricsVersion}",
            "io.dropwizard.metrics:metrics-servlets:${metricsVersion}",
            "io.prometheus:simpleclient_dropwizard:${prometheusVersion}",
            "io.prometheus:simpleclient_hotspot:${prometheusVersion}",
            "io.prometheus:simpleclient_logback:${prometheusVersion}",
            "io.prometheus:simpleclient_servlet:${prometheusVersion}",
            "io.prometheus.jmx:collector:${prometheusJmxVersion}",
            "com.samskivert:jmustache:${jmustacheVersion}",
            "com.squareup.okhttp3:okhttp:${okhttpVersion}",
            "com.oakfusion:spring-cookie-session:${springCookieSessionVersion}",
            "commons-codec:commons-codec:${commonsCodecVersion}",
            "org.apache.commons:commons-lang3:${commonsLang3Version}",
            "com.google.zxing:javase:${zxingVersion}",
            "com.nimbusds:nimbus-jose-jwt:${nimbusJoseJwtVersion}"


    testCompile "junit:junit:${junitVersion}",
            "org.hamcrest:hamcrest-library:${hamcrestVersion}",
            "org.springframework.boot:spring-boot-starter-test:${springBootVersion}",
            "com.squareup.okhttp3:mockwebserver:${okhttpVersion}",
            "commons-io:commons-io:${commonsIoVersion}"

    springloaded "org.springframework:springloaded:${springLoadedVersion}"
}

task copySpringLoaded(type: Copy,
        description: 'Make Spring Loaded available for IDE and CLI use.',
        group: 'Build Setup') {
    from {
        configurations.springloaded
    }
    into {
        "agents/"
    }
}

task copyServerTempl(type: Copy,
    description: 'Copy server templates from the client',
    group: 'Build Setup'){
    from {
        fileTree("node_modules/citizenship-appointment-client/views/server").files
    }
    into {
        "src/main/resources/templates"
    }
}

task copyImageAssets(type: Copy,
        description: 'Copy image assets from the client',
        group: 'Build Setup'){
        from {
            fileTree("node_modules/citizenship-appointment-client/images/").files
        }
        into {
            "src/main/resources/public/images"
        }

}

task copyBundledAssets(type: Copy,
        description: 'Copy bundled assets from the client',
        group: 'Build Setup'){
    from {
        fileTree("node_modules/citizenship-appointment-client/dist/").files
    }
    into {
        "src/main/resources/public/static"
    }
}


clean.doFirst {
    delete "${projectDir}/node_modules"
    delete "${projectDir}/src/main/resources/templates"
    delete "${projectDir}/src/main/resources/public"
}

run.dependsOn copySpringLoaded
bootRun.dependsOn copySpringLoaded

copyBundledAssets.dependsOn npmInstall
copyImageAssets.dependsOn npmInstall
copyServerTempl.dependsOn npmInstall
processResources.dependsOn copyServerTempl, copyImageAssets, copyBundledAssets

task wrapper(type: Wrapper,
        description: 'Create Gradle wrapper scripts.',
        group: 'Build Setup') {
    gradleVersion = '2.10'
}
