buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE'
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.2.0'
        classpath 'com.moowork.gradle:gradle-node-plugin:0.11'
        classpath 'org.owasp:dependency-check-gradle:1.3.5'
    }
}

apply plugin: 'application'                  // https://docs.gradle.org/current/userguide/application_plugin.html
apply plugin: 'com.moowork.node'             // https://github.com/srs/gradle-node-plugin
apply plugin: 'findbugs'                     // https://docs.gradle.org/current/userguide/findbugs_plugin.html
apply plugin: 'java'                         // https://docs.gradle.org/current/userguide/java_plugin.html
apply plugin: 'org.owasp.dependencycheck'    // https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/
apply plugin: 'org.unbroken-dome.test-sets'  // https://github.com/unbroken-dome/gradle-testsets-plugin
apply plugin: 'spring-boot'                  // http://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-gradle-plugin.html
apply plugin: "jacoco"                       // https://docs.gradle.org/current/userguide/jacoco_plugin.html

node {
    version = '4.2.6'
    npmVersion = '2.14.12'
    // Base URL for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'https://nodejs.org/dist'
    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true
    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")
    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}")
}

findbugs {
    effort = 'max'
    ignoreFailures = false
    reportLevel = 'high'
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/reports/jacoco/jacocoHtml"
    }
}

def javaVersion = '1.8'
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

def springLoadedVersion = '1.2.5.RELEASE'
mainClassName = 'au.gov.dto.dibp.appointments.Application'
applicationDefaultJvmArgs = ["-javaagent:agents/springloaded-${springLoadedVersion}.jar", '-noverify']

group = 'au.gov.dto.dibp'
version = '0.0.1'

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

configurations {
    all*.exclude group: 'commons-logging'              // Never include commons-logging (use SLF4J instead)
    all*.exclude group: 'log4j'                        // Never include log4j (use SLF4J instead)
    all*.exclude group: 'org.apache.tomcat.embed'      // Never include Tomcat (use Jetty instead)
    all*.exclude group: 'org.eclipse.jetty.websocket'  // No need for websocket support
    all*.exclude module: 'jetty-jsp'                   // No need for JSP support
    all*.exclude module: 'slf4j-log4j12'               // Use logback
    all*.exclude module: 'slf4j-simple'                // Use logback
    all*.exclude module: 'spring-boot-starter-tomcat'  // Never include Tomcat (use Jetty instead)

    springloaded
}

testSets {
    integrationTest { dirName = 'integration-test' }
}

tasks.integrationTest.group = 'Verification'
tasks.integrationTest.description = 'Runs the integration tests.'
//tasks.integrationTest.outputs.upToDateWhen { false }  // Run all integration tests every time, even if no changes have been made

check.dependsOn jacocoTestReport     // Run jacoco code coverage report
check.dependsOn integrationTest      // The check task fails the build if there are failing integration tests
integrationTest.shouldRunAfter test  // Run unit tests before integration tests

// Ensure that the HTML reports of unit and integration tests are written to different directories
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")

    // Suppress log output on build servers
    if ([System.getenv('CI'), System.getenv('TRAVIS'), System.getenv('CIRCLECI')].contains('true') || System.getenv('SHOW_TEST_LOG') != 'true') {
        systemProperty 'logging.config', 'src/integration-test/resources/logback-noout.xml'             // override when running Spring Boot application
        systemProperty 'logback.configurationFile', 'src/integration-test/resources/logback-noout.xml'  // override when not running Spring Boot application
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

repositories {
    mavenCentral()
    maven {
        url 'http://raonifn.github.com/repository/releases/'
    }
}

def hamcrestVersion = '1.3'
def junitVersion = '4.12'
def springBootVersion = '1.3.3.RELEASE'
def okhttpVersion = '3.2.0'
def metricsVersion = '3.1.2'
def commonsIoVersion = '2.4'
def commonsCodecVersion = '1.10'
def commonsLang3Version = '3.4'
def zxingVersion = '3.2.1'
def prometheusVersion = '0.0.13'
def prometheusJmxVersion = '0.6'
def nimbusJoseJwtVersion = '4.12'
def casperjsJunitVersion = '0.4.0'
def userAgentUtilsVersion = '1.19'
def jpasskitVersion = '0.0.8'
def pushyVersion = '0.7.2'
def nettyTcnativeVersion = '1.1.33.Fork17'
def alpnApiVersion = '1.1.2.v20150522'

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}",
            "org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}",
            "org.springframework.boot:spring-boot-starter-mustache:${springBootVersion}",
            "org.springframework.boot:spring-boot-starter-security:${springBootVersion}",
            "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}",
            "io.dropwizard.metrics:metrics-jetty9:${metricsVersion}",
            "io.dropwizard.metrics:metrics-logback:${metricsVersion}",
            "io.dropwizard.metrics:metrics-servlet:${metricsVersion}",
            "io.dropwizard.metrics:metrics-servlets:${metricsVersion}",
            "io.prometheus:simpleclient_dropwizard:${prometheusVersion}",
            "io.prometheus:simpleclient_hotspot:${prometheusVersion}",
            "io.prometheus:simpleclient_logback:${prometheusVersion}",
            "io.prometheus:simpleclient_servlet:${prometheusVersion}",
            "io.prometheus.jmx:collector:${prometheusJmxVersion}",
            "com.squareup.okhttp3:okhttp:${okhttpVersion}",
            "commons-codec:commons-codec:${commonsCodecVersion}",
            "org.apache.commons:commons-lang3:${commonsLang3Version}",
            "com.google.zxing:javase:${zxingVersion}",
            "com.nimbusds:nimbus-jose-jwt:${nimbusJoseJwtVersion}",
            "eu.bitwalker:UserAgentUtils:${userAgentUtilsVersion}",
            "de.brendamour:jpasskit:${jpasskitVersion}",
            "com.relayrides:pushy:${pushyVersion}",
            "io.netty:netty-tcnative-boringssl-static:${nettyTcnativeVersion}",
            "org.eclipse.jetty.alpn:alpn-api:${alpnApiVersion}"

    testCompile "junit:junit:${junitVersion}",
            "org.hamcrest:hamcrest-library:${hamcrestVersion}",
            "org.springframework.boot:spring-boot-starter-test:${springBootVersion}",
            "com.squareup.okhttp3:mockwebserver:${okhttpVersion}",
            "commons-io:commons-io:${commonsIoVersion}",
            "com.github.raonifn:casperjs-junit:${casperjsJunitVersion}"

    springloaded "org.springframework:springloaded:${springLoadedVersion}"
}

task copySpringLoaded(type: Copy,
        description: 'Make Spring Loaded available for IDE and CLI use.',
        group: 'Build Setup') {
    from {
        configurations.springloaded
    }
    into {
        "agents/"
    }
}

task copyServerTempl(type: Copy,
    description: 'Copy server templates from the client',
    group: 'Build Setup'){
    from {
        fileTree("node_modules/citizenship-appointment-client/views/server").files
    }
    into {
        "src/main/resources/templates"
    }
}

task copyImageAssets(type: Copy,
        description: 'Copy image assets from the client',
        group: 'Build Setup'){
    from {
        fileTree("node_modules/citizenship-appointment-client/images/").files
    }
    into {
        "src/main/resources/public/images"
    }
}

task copyDefaultFavicon(type: Copy,
        description: 'Copy default favicon from the client',
        group: 'Build Setup'){
    from 'node_modules/citizenship-appointment-client/images'
    into 'src/main/resources/public'
    include 'favicon.ico'
}

task copyBundledAssets(type: Copy,
        description: 'Copy bundled assets from the client',
        group: 'Build Setup'){
    from {
        fileTree("node_modules/citizenship-appointment-client/dist/")
    }
    into {
        "src/main/resources/public/static"
    }
}

clean.doFirst {
    delete "${projectDir}/node_modules/citizenship-appointment-client"
    delete "${projectDir}/src/main/resources/templates"
    delete "${projectDir}/src/main/resources/public"
}

run.dependsOn copySpringLoaded
bootRun.dependsOn copySpringLoaded

copyBundledAssets.dependsOn npmInstall
copyImageAssets.dependsOn npmInstall
copyDefaultFavicon.dependsOn npmInstall
copyServerTempl.dependsOn npmInstall
processResources.dependsOn copyServerTempl, copyImageAssets, copyDefaultFavicon, copyBundledAssets

task wrapper(type: Wrapper,
        description: 'Create Gradle wrapper scripts.',
        group: 'Build Setup') {
    gradleVersion = '2.11'
}
