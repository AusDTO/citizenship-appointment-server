buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.0.RELEASE'
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.2.0'
        classpath "com.moowork.gradle:gradle-node-plugin:0.11"
    }
}

apply plugin: 'application'                  // http://www.gradle.org/docs/current/userguide/application_plugin.html
apply plugin: 'java'                         // http://www.gradle.org/docs/current/userguide/java_plugin.html
apply plugin: 'org.unbroken-dome.test-sets'  // https://github.com/unbroken-dome/gradle-testsets-plugin
apply plugin: 'spring-boot'                  // http://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-gradle-plugin.html
apply plugin: 'com.moowork.node'

node {
    version = '4.2.3'
    npmVersion = '2.14.7'
    // Base URL for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'https://nodejs.org/dist'
    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true
    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")
    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}")
}

def javaVersion = '1.8'
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

def springLoadedVersion = '1.2.4.RELEASE'
mainClassName = 'au.gov.dto.dibp.appointments.Application'
applicationDefaultJvmArgs = ["-javaagent:agents/springloaded-${springLoadedVersion}.jar", '-noverify']

group = 'au.gov.dto.dibp'
version = '0.0.1'

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

configurations {
    all*.exclude group: 'commons-logging'              // Never include commons-logging (use SLF4J instead)
    all*.exclude group: 'log4j'                        // Never include log4j (use SLF4J instead)
    all*.exclude module: 'jetty-jsp'                   // No need for JSP support
    all*.exclude module: 'slf4j-simple'                // Use logback
    all*.exclude module: 'spring-boot-starter-tomcat'  // Never include Tomcat (use Jetty instead)

    springloaded
}

testSets {
    integrationTest { dirName = 'integration-test' }
}

tasks.integrationTest.group = 'Verification'
tasks.integrationTest.description = 'Runs the integration tests.'
//tasks.integrationTest.outputs.upToDateWhen { false }  // Run all integration tests every time, even if no changes have been made

check.dependsOn integrationTest      // The check task fails the build if there are failing integration tests
integrationTest.shouldRunAfter test  // Run unit tests before integration tests

// Ensure that the HTML reports of unit and integration tests are written to different directories
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

repositories {
    mavenCentral()
}

def hamcrestVersion = '1.3'
def jettyVersion = '9.2.14.v20151106'
def jmustacheVersion = '1.11'
def junitVersion = '4.12'
def springBootVersion = '1.3.0.RELEASE'

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}",
            "org.eclipse.jetty:jetty-webapp:${jettyVersion}",
            "org.eclipse.jetty:jetty-servlets:${jettyVersion}",
            "com.samskivert:jmustache:${jmustacheVersion}"

    testCompile "junit:junit:${junitVersion}",
            "org.hamcrest:hamcrest-library:${hamcrestVersion}",
            "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"

    springloaded "org.springframework:springloaded:${springLoadedVersion}"
}

task copySpringLoaded(type: Copy,
        description: 'Make Spring Loaded available for IDE and CLI use.',
        group: 'Build Setup') {
    from {
        configurations.springloaded
    }
    into "agents/"
}

task copyServerTempl(type: Copy,
    description: 'Copy server templates from the client',
    group: 'Build Setup'){
    from{
        "node_modules/citizenship-appointment-client/views/server"
    }
    into "src/main/resources/templates/client"
}

run.dependsOn copySpringLoaded
bootRun.dependsOn copySpringLoaded

copyServerTempl.dependsOn npmInstall
processResources.finalizedBy copyServerTempl

task wrapper(type: Wrapper,
        description: 'Create Gradle wrapper scripts.',
        group: 'Build Setup') {
    gradleVersion = '2.9'
}
